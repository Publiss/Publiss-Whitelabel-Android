apply plugin: 'com.android.application'

ext {
    // ATTENTION do not forget to run "gradlew clean" when changing the package name!
    PACKAGE_NAME = "com.publiss.whitelabel" // Take Bundle Id from Publiss Online
}

android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    signingConfigs {
        publiss {
            def keyStoreFile = System.getenv("ANDROID_PUBLISS_KEYSTORE_PATH")

            if (keyStoreFile == null) {
                keyStoreFile = "/dummy.pks"
            }
            // We can leave these in environment variables
            storeFile file(keyStoreFile)
            keyAlias System.getenv("ANDROID_PUBLISS_KEY_ALIAS")

            // These two lines make gradle believe that the signingConfigs
            // section is complete. Without them, tasks like installRelease
            // will not be available!
            storePassword System.getenv("ANDROID_PUBLISS_KEYSTORE_PASSWORD")
            keyPassword System.getenv("ANDROID_PUBLISS_KEY_PASSWORD")
        }
    }

    configurations.all {
        resolutionStrategy {
            // don't cache changing modules at all
            cacheChangingModulesFor 0, 'seconds'
        }
    }


    defaultConfig {
        applicationId PACKAGE_NAME
        minSdkVersion 15
        targetSdkVersion 20
        versionCode retrieveVersionCode()
        println "VersionCode: " + versionCode
        versionName generateVersionName(versionCode)
        println "VersionName: " + versionName
    }
    buildTypes {
        release {
            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            signingConfig signingConfigs.publiss
            proguardFiles getDefaultProguardFile('proguard-project.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        def manifestParser = new com.android.builder.core.DefaultManifestParser()
//                        def versionName = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile);
                        def fileName = outputFile.name.replace("app-", "app-" + System.getenv("ANDROID_APK_TYPE") + "-")
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    android.applicationVariants.all{ variant ->
        variant.mergeResources.doLast{
            ext.env = System.getenv()
            File valuesFile = file("${buildDir}/intermediates/res/${variant.dirName}/values/values.xml")
            println("Replacing package name placeholder in " + valuesFile + " with " + PACKAGE_NAME)
            String content = valuesFile.getText('UTF-8')

            content = content.replaceAll(/PACKAGE_NAME_INSERTED_BY_GRADLE/, PACKAGE_NAME)
            valuesFile.write(content, 'UTF-8')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile ('com.publiss.core:publiss-android-core:1.0.0@aar')
    compile ('com.manuelpeinado.fadingactionbar:fadingactionbar:3.+@aar')
    compile 'com.pspdfkit:pspdfkit:1.0.0@aar'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:support-v13:20.0.0'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.picasso:picasso:2.3.4'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'
    compile 'com.nhaarman.listviewanimations:lib-manipulation:3.1.0@aar'
    compile 'com.nhaarman.listviewanimations:lib-core-slh:3.1.0@aar'
    compile 'com.squareup.retrofit:retrofit:1.7.1'
    compile 'commons-codec:commons-codec:1.9'
    compile 'de.greenrobot:eventbus:2.2.1'
    compile 'com.path:android-priority-jobqueue:1.1.2'
    compile 'it.sephiroth.android.library.horizontallistview:hlistview:1.2.2'
    compile 'com.github.castorflex.smoothprogressbar:library:1.0.0'
    compile 'com.netflix.rxjava:rxjava-core:0.20.5'
    compile 'com.netflix.rxjava:rxjava-android:0.20.5'
    compile 'com.google.guava:guava:18.0'
    compile ('com.pnikosis:materialish-progress:1.1') {
        exclude group: "com.android.support"
    }
    compile 'com.google.android.gms:play-services:5.0.+'
    compile 'com.github.johnpersano:supertoasts:1.3.4@aar'

}

def retrieveVersionCode() {
    def calculatedVersionCode = System.getenv("BUILD_NUMBER");
    if (null == calculatedVersionCode) {
        calculatedVersionCode = "-1";
    }
    return Integer.parseInt(calculatedVersionCode)
}

def getGitDescribe() {
    try {
        return 'git describe --tags'.execute().text.trim()
    } catch (IOException exception) {
        throw new UnsupportedOperationException("Could not find git! Maybe it is not in \$PATH variable?", exception)
    }
}

def getCurrentGitBranch() {
    try {
        return 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    } catch (IOException exception) {
        throw new UnsupportedOperationException("Could not find git! Maybe it is not in \$PATH variable?", exception)
    }
}

def generateVersionName(buildNumber) {
    def versionName
    if (buildNumber == -1) {
        // local build
        versionName = getGitDescribe() + " " + getCurrentGitBranch()
    } else {
        // jenkins build
        versionName = getGitDescribe()
    }
    return versionName
}
