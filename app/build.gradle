apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply from: '../gradle/quality.gradle'

ext {
    // ATTENTION do not forget to run "gradlew clean" when changing the package name!
    PACKAGE_NAME = "com.publiss.whitelabel" // Take Bundle Id from Publiss Online
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    configurations.all {
        resolutionStrategy {
            // don't cache changing modules at all
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    productFlavors {
        submodule {
        }
        nexussnapshot {
        }
        nexus {
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    defaultConfig {
        applicationId PACKAGE_NAME
        minSdkVersion 15
        targetSdkVersion 22
        versionCode retrieveVersionCode()
        println "VersionCode: " + versionCode
        versionName generateVersionName(versionCode)
        println "VersionName: " + versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        release {
            debuggable false
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        def manifestParser = new com.android.builder.core.DefaultManifestParser()
//                        def versionName = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile);
                        def apkType = System.getenv("ANDROID_APK_TYPE")
                        if (apkType.equals("null")) {
                            apkType = "local"
                        }
                        def fileName = outputFile.name.replace("app-", "app-" + PACKAGE_NAME.replace(".", "-") + "-" + apkType + "-")
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    sourceSets {
        androidTest {
            java.srcDirs = ['src/androidTest/java']
            res.srcDirs = ['src/androidTest/res']
        }
        test {
            java.srcDirs = ['src/test/java']
            res.srcDirs = ['src/test/res']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

android.applicationVariants.all{ variant ->
    variant.mergeResources.doLast{
        ext.env = System.getenv()
        File valuesFile = file("${buildDir}/intermediates/res/${variant.dirName}/values/values.xml")
        println("Replacing package name placeholder in " + valuesFile + " with " + PACKAGE_NAME)
        String content = valuesFile.getText('UTF-8')

        content = content.replaceAll(/PACKAGE_NAME_INSERTED_BY_GRADLE/, PACKAGE_NAME)
        valuesFile.write(content, 'UTF-8')
    }
}

dependencies {
    nexusCompile('com.publiss.core:publiss-android-core:1.4.3-RC1@aar') {
        transitive = true
    }
    nexussnapshotCompile('com.publiss.core:publiss-android-core:dev-SNAPSHOT@aar') {
        transitive = true
    }
    submoduleCompile project(':publiss-android-core')
    compile 'com.bytepoets.bporssreader:bporssreader:1.1.2@aar'
    compile ('com.bytepoets.bpobarcodescanner:bpobarcodescanner:dev-SNAPSHOT@aar') {
        transitive = true
    }
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'com.android.support.test:runner:0.2'
    androidTestCompile 'com.android.support.test:rules:0.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.1'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}


def retrieveVersionCode() {
    def calculatedVersionCode = System.getenv("BUILD_NUMBER");
    if (null == calculatedVersionCode) {
        calculatedVersionCode = "-1";
    }
    return Integer.parseInt(calculatedVersionCode)
}

def getGitDescribe() {
    try {
        return 'git describe --tags'.execute().text.trim()
    } catch (IOException exception) {
        throw new UnsupportedOperationException("Could not find git! Maybe it is not in \$PATH variable?", exception)
    }
}

def getCurrentGitBranch() {
    try {
        return 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    } catch (IOException exception) {
        throw new UnsupportedOperationException("Could not find git! Maybe it is not in \$PATH variable?", exception)
    }
}

def generateVersionName(buildNumber) {
    def versionName
    if (buildNumber == -1) {
        // local build
        versionName = getGitDescribe() + " " + getCurrentGitBranch()
    } else {
        // jenkins build
        versionName = getGitDescribe()
    }
    return versionName.concat(" (" + getDate() + ")")
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

def signing_config_path = System.getenv("SIGNING_CONFIGURATION_FILE")
logger.quiet("Signing config path: " + signing_config_path)
if (null != signing_config_path && !signing_config_path.isEmpty()) {
    def signing_config_file = file(signing_config_path)
    if (signing_config_file.exists()) {
        apply from: signing_config_file.absolutePath
    } else {
        apply from: file("../gradle/signing_config.gradle")
    }
}
