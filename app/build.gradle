apply plugin: 'com.android.application'
apply from: '../gradle/quality.gradle'

ext {
    // ATTENTION do not forget to run "gradlew clean" when changing the package name!
    PACKAGE_NAME = "com.publiss.publissplaystore"
}


android {

    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    signingConfigs {
        publiss {
            def keyStoreFile = System.getenv("ANDROID_PUBLISS_KEYSTORE_PATH")

            if (keyStoreFile == null) {
                keyStoreFile = "/dummy.pks"
            }
            // We can leave these in environment variables
            storeFile file(keyStoreFile)
            keyAlias System.getenv("ANDROID_PUBLISS_KEY_ALIAS")

            // These two lines make gradle believe that the signingConfigs
            // section is complete. Without them, tasks like installRelease
            // will not be available!
            storePassword System.getenv("ANDROID_PUBLISS_KEYSTORE_PASSWORD")
            keyPassword System.getenv("ANDROID_PUBLISS_KEY_PASSWORD")
        }
    }

    defaultConfig {
        applicationId PACKAGE_NAME
        minSdkVersion 15
        targetSdkVersion 20
        versionCode retrieveVersionCode()
        println "VersionCode: " + versionCode
        versionName generateVersionName(versionCode)
        println "VersionName: " + versionName
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        debugwithproguard {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            signingConfig signingConfigs.publiss
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        def manifestParser = new com.android.builder.core.DefaultManifestParser()
//                        def versionName = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile);
                        def fileName = outputFile.name.replace("app-", "publiss-" + System.getenv("ANDROID_APK_TYPE") + "-")
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    android.applicationVariants.all{ variant ->
        variant.mergeResources.doLast{
            ext.env = System.getenv()
            File valuesFile = file("${buildDir}/intermediates/res/${variant.dirName}/values/values.xml")
            println("Replacing package name placeholder in " + valuesFile + " with " + PACKAGE_NAME)
            String content = valuesFile.getText('UTF-8')

            content = content.replaceAll(/PACKAGE_NAME_INSERTED_BY_GRADLE/, PACKAGE_NAME)
            valuesFile.write(content, 'UTF-8')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        lintConfig file("lint.xml")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

dependencies {
    compile project(':publiss-android-core')
}

def retrieveVersionCode() {
    def calculatedVersionCode = System.getenv("BUILD_NUMBER");
    if (null == calculatedVersionCode) {
        calculatedVersionCode = "-1";
    }
    return Integer.parseInt(calculatedVersionCode)
}

def getGitDescribe() {
    try {
        return 'git describe --tags'.execute().text.trim()
    } catch (IOException exception) {
        throw new UnsupportedOperationException("Could not find git! Maybe it is not in \$PATH variable?", exception)
    }
}

def getCurrentGitBranch() {
    try {
        return 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    } catch (IOException exception) {
        throw new UnsupportedOperationException("Could not find git! Maybe it is not in \$PATH variable?", exception)
    }
}

def generateVersionName(buildNumber) {
    def versionName
    if (buildNumber == -1) {
        // local build
        versionName = getGitDescribe() + " " + getCurrentGitBranch()
    } else {
        // jenkins build
        versionName = getGitDescribe()
    }
    return versionName
}
